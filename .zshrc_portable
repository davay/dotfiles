# Paths
export PATH="$HOME/.local/bin:$PATH" # pip?
export PATH="$HOME/.cargo/bin/:$PATH" # rust
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST

# Tokens and API Keys
load_gemini_key() {
    export GEMINI_API_KEY="$(op read "op://Personal/Gemini API Key/credential")"
}

gemini() {
    if [ -z "${GEMINI_API_KEY}" ]; then
        echo "GEMINI_API_KEY not set. Run load_gemini_key first."
        return 1
    fi
    
    xh POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}" \
    contents:="$1"
}

# powerlevel10k
# [[ ! -f ~/powerlevel10k/powerlevel10k.zsh-theme ]] || source ~/powerlevel10k/powerlevel10k.zsh-theme
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ls colors
# export LS_COLORS="ln=1;32:ex=1;32:di=1;94:ow=1;7;94"

# Helpers
declare -A HELP_MESSAGES=(
    ["backmerge"]="Usage: backmerge <branch>"
    ["clone"]="Usage: clone <repository-url>"
    ["checkout"]="Usage: checkout <branch; commit_id; integer_commits_ago>"
    ["branch"]="Usage: branch <new-branch-name>"
    ["commit"]="Usage: commit \"<commit-message>\""
    ["add"]="Usage: add <dir-or-file>"
    ["stash"]="Usage: stash \"<stash-message>\""
    ["show"]="Usage: show <integer_commits_ago>"
    ["ammend"]="Usage: ammend \"<commit-message>\""
)

check_param() {
  if [[ -n $BASH_VERSION ]]; then # bash
    caller="${FUNCNAME[1]}"
  else  # zsh / ksh, use offset:length so it always works
    # zsh arrays start at 1, with ksh arrays option it starts at 0 https://stackoverflow.com/questions/31426565/get-name-of-calling-function-in-zsh
    caller="${funcstack[@]:1:1}"
  fi
  if [ -z "$1" ]; then
    echo "${HELP_MESSAGES[$caller]}" >&2
    return 1
  fi
  return 0
}

# General alias
alias sudo="sudo " # enable aliases for sudo
alias vim="nvim"
alias v="vim"
alias pack="tar -zcvf"
alias unpack="tar -zxvf"
alias ls="lsd"
alias l="ls"
alias la="ls -a"
alias ll="ls -lt"
alias lt="ls --tree --depth 2"
alias cat="bat"
alias vd="vd --theme=ascii8"

# Config alias
alias zshc="vim ~/.zshrc"
alias zshpc="vim ~/.zshrc_portable"
alias zshlc="vim ~/.zshrc_local"

# cd alias
alias cconfig="c ~/.config"
alias ch="c ~"
alias cnvim="c ~/.config/nvim/lua"
alias cghostty="c ~/Library/Application\ Support/com.mitchellh.ghostty"

# Python alias 
alias pipnuke="pip freeze | cut -d "@" -f1 | xargs pip uninstall -y"
alias pipfreeze="pip freeze > requirements.txt"

# SSH alias
alias sshpi="ssh pi@pi.devinl.im"
alias sshda="ssh davay@ssh.devinl.im"
alias sshhetzner="ssh root@hetzner.devinl.im"

# gh alias
alias repocreate="git remote remove origin || gh repo create --public --source . --remote origin && upstreamorigin"
alias repodelete="gh repo delete $(basename $PWD)"
alias repofork="gh repo fork --clone=true"
alias prcreate="gh pr create"

# git alias
## aliases without params
alias lg="lazygit"
alias init="git init"
alias upstreamorigin="currBranch=\$(git rev-parse --abbrev-ref HEAD) && git push --set-upstream origin \$currBranch"
alias upstreamdavay="currBranch=\$(git rev-parse --abbrev-ref HEAD) && git push --set-upstream davay \$currBranch"
alias undo="git reset --soft HEAD~1"
alias reignore="git rm -r --cached . && git add ." # if you updated gitignore after committing
alias status="git status"
alias pull="git pull"
alias push="git push"
alias clean="git clean -dfx"
alias stashlist="git stash list"
alias stashshow="git stash show -p"
alias stashpop="git stash pop"
alias branches="git --no-pager branch --all"
alias commits="git --no-pager log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias lfsconfig='echo -e "[lfs]\nurl = git@git.devinl.im:$(basename $(git rev-parse --show-toplevel)).git\nlocksverify = true" > .lfsconfig'

nuke() {
  git fetch origin && \
  git clean -dfx && \
  git reset --hard origin/$(git symbolic-ref --short HEAD)
}

## aliases requiring params
backmerge() {
    check_param "$1" || return 1
    currBranch=$(git rev-parse --abbrev-ref HEAD)
    git checkout "$1" && \
    git pull && \
    git checkout $currBranch && \
    git merge "$1"
}

clone() {
  check_param "$1" || return 1
  git clone "$1"
}

checkout() {
  check_param "$1" || return 1
  
  # 1: Check if it's a branch
  if git rev-parse --verify --quiet "$1" >/dev/null 2>&1; then
    git checkout "$1"
    return $?
  fi

  # 2: Check if it's a remote branch
  if git rev-parse --verify --quiet "origin/$1" >/dev/null 2>&1; then
    git checkout -b "$1" "origin/$1"
    return $?
  fi

  # 3: Check if it's a valid commit ID
  if git rev-parse --verify --quiet "$1^{commit}" >/dev/null 2>&1; then
    git checkout "$1"
    return $?
  fi

  # 4: Check if it's a number to go back in history
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    git checkout "HEAD~$1"
    return $?
  fi

  echo "Error: '$1' is not a valid branch, commit ID, or number of commits to go back"
  return 1
}

branch() {
  check_param "$1" || return 1
  git checkout -b "$1"
}

commit() {
  check_param "$1" || return 1
  git commit -am "$1"
}

add() {
  check_param "$1" || return 1
  git add "$1"
}

stash() {
  check_param "$1" || return 1
  git stash push --include-untracked -m "$1"
}

show() {
  check_param "$1" || return 1
  git show HEAD~"$1"
}

ammend() {
  check_param "$1" || return 1
  git commit --amend -m "$1"
}

reset() {
    if [ $# -eq 0 ]; then
        git reset --hard HEAD
    else
        git restore --source=HEAD "$@"
    fi
}

# gen z alias 
alias yikes="git reset --hard HEAD"
alias bigyikes="git clean -dfx && git reset --hard HEAD"

# unused gen z alias
# alias smash="git merge"
# alias ong="rm -rf"
# alias yoink="git pull"
# alias yeet="git push"
# alias cap="-n"
# alias nocap="-f"
# alias yap="-v"
# alias noyap="-q"
# alias please="sudo"
# alias based="c ~/"
# alias bet="git add"
# alias fr="git commit"

# Custom functions
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do 
    /usr/bin/time $shell -i -c exit;
  done
}

c() {
  cd "$@" && ls
}

# Pretty xsv, also replace empty values with -, handle edge cases:
# - when 2 missing values are adjacent
# - when missing value is at the beginning
# - when missing value is at the end
x() {
  xsv input "$@" | \
    sed -e ':a' -e 's/,,/,…,/g' -e 'ta' \
    -e 's/^,/…,/' \
    -e 's/,$/,…/' | \
    bat -l csv
}
