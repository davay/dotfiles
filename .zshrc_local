fpath+=("$(brew --prefix)/share/zsh/site-functions")

# General alias
alias router="netstat -nr|grep default" # router ip addr
alias leetcode="nvim leetcode.nvim"
alias exrdeploy="(cexr && pack editxr.tgz --exclude=node_modules --exclude=dist --exclude=editxr.tgz * && gcloud builds submit editxr.tgz)"
alias man="batman"
alias less="batpipe"
alias watch="batwatch"
alias diff="batdiff"
alias rg="batgrep"
alias skim="/Applications/Skim.app/Contents/MacOS/Skim"
present() {
    jupyter dejavu "$1" --template reveal
    open "${1%.*}.html"
}
alias ard="arduino-cli"
mov2mp4() {
    avconvert --source "$1" --output "${1%.*}.mp4" --preset PresetHighestQuality
}
vidstack() {
    if [ "$1" = "--audio" ]; then
        ffmpeg -i "$2" -i "$3" -filter_complex "[0:v][1:v]hstack=inputs=2[v]" -map "[v]" -map "0:a" stacked.mp4
    else
        ffmpeg -i "$1" -i "$2" -filter_complex "[0:v][1:v]hstack=inputs=2[v]" -map "[v]" stacked.mp4
    fi
}
cpd() {
    latest_file=$(find ~/Downloads -type f -maxdepth 1 -print0 | xargs -0 ls -t | head -1)
    
    if [ -z "$latest_file" ]; then
        echo "No files found in Downloads directory"
        return 1
    fi
    
    echo "Most recent file is: $latest_file"
    echo -n "Do you want to copy this file? (y/n) "
    read confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        cp "${latest_file}" "${1:-.}"
    else
        echo "Copy cancelled"
    fi
}
mvd() {
    latest_file=$(find ~/Downloads -type f -maxdepth 1 -print0 | xargs -0 ls -t | head -1)
    
    if [ -z "$latest_file" ]; then
        echo "No files found in Downloads directory"
        return 1
    fi
    
    echo "Most recent file is: $latest_file"
    echo -n "Do you want to move this file? (y/n) "
    read confirm
    
    if [[ $confirm =~ ^[Yy]$ ]]; then
        mv "${latest_file}" "${1:-.}"
    else
        echo "Move cancelled"
    fi
}

# abduco stuff
alias ab="abduco -e ^q"
abc() {
    abduco -e ^q -c "$1"
}
aba() {
    abduco -e ^q -a "$1"
}
abk() {
    pkill -f "abduco.*$1"
}
abm() {
    abduco -e ^q -c "$1" mosh "$2"
}
abmhetzner() {
    abduco -e ^q -c "$1" mosh root@hetzner.devinl.im
}


# Config alias
alias yadmc="vim ~/.config/yadm/bootstrap"
alias macc="vim ~/.config/yadm/mac-install.yml"
alias yabaic="vim ~/.config/yabai/yabairc"
alias skhdc="vim ~/.config/skhd/skhdrc"
alias sketchybarc="vim ~/.config/sketchybar/sketchybarrc"
alias wezc="vim ~/.wezterm.lua"
alias kittyc="vim ~/.config/kitty/kitty.conf"
alias ghosttyc="vim ~/Library/Application\ Support/com.mitchellh.ghostty/config"
alias aerospacec="vim ~/.config/aerospace/aerospace.toml"

# cd alias 
alias cyadm="c ~/.config/yadm"
alias csketchybar="c ~/.config/sketchybar/"
alias cexr="c ~/Repos/Personal/EditXR"
alias crepos="c ~/Repos"
alias cwork="c ~/Repos/Work"
alias cschool="c ~/Repos/School"
alias cpersonal="c ~/Repos/Personal"
alias csu="c ~/Drive/usa/school/su"
alias cleetcode="c ~/Repos/Personal/leetcode"
alias cdownloads="c ~/Downloads"
alias cusa="c ~/Drive/usa/"
alias cmutagen="c ~/Mutagen/"
alias caerospace="c ~/.config/aerospace/"

# yadm alias 
alias ycommit="yadm commit -am"
alias ystatus="yadm status"
alias ydiff="yadm diff | prettybat"
alias yadd="yadm add"
alias ypull="yadm pull"
alias ypush="yadm push"
alias yclean="yadm clean -dfx"
alias yreset="yadm reset --hard HEAD"
alias ynuke="yadm clean -dfx && yadm reset --hard HEAD"

# SSH alias
alias synchetzner="syncssh root@hetzner.devinl.im"

# custom scripts 
alias colortest="~/.config/yadm/scripts/colortest.sh"
alias syncssh="~/.config/yadm/scripts/sync_ssh.sh"

syncvim() {
 rsync -av ~/.config/nvim $1:~/.config
}

syncfile() {
 rsync -av $1 $2
}

# python pacakges required for jupyter + vim 
alias vimdeps="pip install pynvim jupyter_client jupytext ipython ipykernel pylatexenc ipywidgets tqdm ruff"

# python packages for general ds work
alias dsdeps="pip install numpy matplotlib scikit-learn pandas pytorch"

## sgqlc: graphql client for github auto-readme
alias otherdeps="conda install sgqlc"

## 1password-cli stuff 
alias optoken="op read op://Personal/$1/token"

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
conda activate py311

export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
export PATH="$(gem environment gemdir)/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

# for image.nvim
# the old way of exporting DYLD_LIBRARY_PATH breaks importing pyarrow https://github.com/3rd/image.nvim/issues/222
export DYLD_FALLBACK_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH"

### powerlevel10k ###
# source /opt/homebrew/share/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#
### pure prompt ###
autoload -U promptinit; promptinit
prompt pure

# # plugin customizations
BREW=$(brew --prefix)

# source $BREW/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh
bindkey "$terminfo[kcbt]" menu-select
bindkey -M menuselect '^I' menu-complete
bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete

source $BREW/share/zsh-autosuggestions/zsh-autosuggestions.zsh
ZSH_AUTOSUGGEST_STRATEGY=(completion)
ZSH_AUTOSUGGEST_HISTORY_IGNORE='(cd|ls|vim|c|l|v) *' # prevent invalid suggestions

# New widget; prioritize autosuggest, otherwise use first item in menu
_custom_tab_accept_suggestion() {
    if [[ -n "$POSTDISPLAY" ]]; then
        zle autosuggest-accept
    else
        zle menu-select
    fi
}
zle -N _custom_tab_accept_suggestion
bindkey '^I' _custom_tab_accept_suggestion # tab

export HOMEBREW_EDITOR="nvim"

complete -o nospace -C /opt/homebrew/bin/terraform terraform
